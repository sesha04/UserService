# This is the OpenAPI specification for your service. It is used to generate the client code.
# To generate the server code, use the Gradle task `openApiGenerate`. The 
# generated code will be placed in `build/generate-resources/main`.
#
# We will evaluate you based on how well you design your API.
# 1. How well it follows REST principles.
# 2. How easy it is to understand and use.
#
# References
# 1. https://swagger.io/specification/
openapi: "3.0.0"
info:
  version: 1.0.0
  title: User Service
  license:
    name: MIT
servers:
  - url: http://localhost
paths:
  /register:
    post:
      summary: This endpoint is used to register a new user.
      operationId: register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fullName:
                  type: string
                  description: User's full name
                  example: John Doe
                phoneNumber:
                  type: string
                  description: User's phone number
                  example: +1234567890
                password:
                  type: string
                  description: User's password
                  minLength: 8
                  example: SecurePassword123
              required:
                - fullName
                - phoneNumber
                - password
      responses:
        '201':
          description: User is created
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/User"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MultiErrorResponse"
        '409':
          description: Conflict. will return if phone number already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /login:
    post:
      summary: This endpoint is used to login.
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                phoneNumber:
                  type: string
                  description: User's phone number
                  example: +1234567890
                password:
                  type: string
                  description: User's password
                  minLength: 8
                  example: SecurePassword123
              required:
                - phoneNumber
                - password
      responses:
        '200':
          description: Login success
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/LoginResponse"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MultiErrorResponse"

  /profile:
    get:
      summary: This endpoint is used to get user profile.
      operationId: getMyProfile
      responses:
        '200':
          description: get profile success
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/User"
    patch:
      summary: This endpoint is used to update user's profile.
      operationId: updateMyProfile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fullName:
                  type: string
                  description: User's full name
                  example: John Doe
                phoneNumber:
                  type: string
                  description: User's phone number
                  example: +1234567890
              required:
                - fullName
                - phoneNumber
      responses:
        '201':
          description: User is created
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/User"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MultiErrorResponse"
        '409':
          description: Conflict. will return if phone number already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    
components:
  schemas:
    User:
      type: object
      required:
        - id
        - fullName
        - phoneNumber
      properties:
        id:
          type: integer
          format: int64
        fullName:
          type: string
        phoneNumber:
          type: string
    LoginResponse:
      type: object
      required:
        - id
        - accessToken
      properties:
        id:
          type: integer
          format: int64
        accessToken:
          type: string
    ErrorResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
    MultiErrorResponse:
      type: object
      required:
        - message
        - errors
      properties:
        message:
          type: string
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ErrorResponse'
